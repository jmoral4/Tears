

STDAFX.H
stdafx.h is a file, generated by Microsoft Visual Studio IDE wizards, that describes both standard system and project specific include files that are used frequently but hardly ever change.

Compatible compilers (for example, Visual C++ 6.0 and newer) will precompile this file to reduce overall compile times. Visual C++ will not compile anything before the #include "stdafx.h" in the source file, unless the compile option /Yu'stdafx.h' is unchecked (by default); it assumes all code in the source up to and including that line is already compiled.

The AFX in stdafx.h stands for Application Framework eXtensions. AFX was the original abbreviation for the Microsoft Foundation Classes (MFC). While the name stdafx.h is used by default, projects may specify an alternative name and handle all includes files containing in project file.



Write your graphics engine in a way that is easy to replace the main library behind it.

What this means is create a group of files that are "allowed" to touch the graphics library directly, and everything else that needs access to rendering can only access it through these files.

My engine's core graphics classes are
•Texture
•Vertex Buffer
•Shader (nvidiaCG)
•Blend Mode
•Frame Buffer (render to texture)
•Enums / Typedefs (such as typedef GLuint gfx_texture_id)
•Graphics General (graphics init, graphics frame begin, graphics frame end [swap buffer])

Matrix Stack and Color Stack used to be part of this, but I rewrote my shaders so that the matrix stack and color stack don't need opengl, all they do is set a value in the current shader through the Shader class.

Notable things that AREN'T part of the core classes (as im they use these classes but NEVER access opengl directly):
•font
•sprite
•animation
•polygon / circle / rectangle renderers

The entire engine could be switched to DirectX by simply rewriting 6 classes and not even needing to touch anything else in the game.

#define GCC_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)