
init - check :

Check system:
harddrive , memory, input , output, cpu speed (reqs)

Setup Key components:
RNG, programmer debug options,

Load player components:
 player game options, saved games

 Init systems:
  init audio (if needed), init window (if needed), physics, AI
 
 InitInstance() 
   Setup Logging System 
 
   Check for Multiple instances
       Create mutex to gate instance access to detection logic
       Use window API to find current window title and verify there isn't one presently running
   check secondary storage and memory
        //check this function --- see if we need to combine the counts or what .. also MaxCapacity vs Capacity query
       private static void DisplayTotalRam()
       {
         string Query = "SELECT MaxCapacity FROM Win32_PhysicalMemoryArray";
         ManagementObjectSearcher searcher = new ManagementObjectSearcher(Query);
         foreach (ManagementObject WniPART in searcher.Get())
         {
           UInt32 SizeinKB = Convert.ToUInt32(WniPART.Properties["MaxCapacity"].Value);
           UInt32 SizeinMB = SizeinKB / 1024;
           UInt32 SizeinGB = SizeinMB / 1024;
           Console.WriteLine("Size in KB: {0}, Size in MB: {1}, Size in GB: {2}", SizeinKB, SizeinMB, SizeinGB);
         }
       }
   calculate cpu speed
       Environment.ProcessorCount  //logical processors
       using System.Management;
       public uint CPUSpeed()
       {
         ManagementObject Mo = new ManagementObject("Win32_Processor.DeviceID='CPU0'");
         uint sp = (uint)(Mo["CurrentClockSpeed"]);
         Mo.Dispose();
         return sp;
       }
       
       
   load game's resource cache
       Look at creating a resource loader in place of the content and texturemanager
       
   load strings (menus/ui)
   
   create script manager (LUA/etc)
        Possible to use C# directly taking same path as previous C# plugin projects (MEF or compiled scriptS)
        Possible to host PowerShell DLL directly and embed powershell in application
   
   create event manager
   use script manager to init game options
   create screen manager
   init game screens
   set directory for save and temp files
         //use special folders to get AppData and PersonalData folders 
         http://msdn.microsoft.com/en-us/library/s2esdf4x%28v=vs.90%29.aspx
   preload resources from resource cache
 
   Exiting:
         Funnel all exit to one routine
         Write exit state of any Singletons to disk
         Dump all memory info to disk
         Clear, purge and shutdown any systems
         Any final debug writes/output
