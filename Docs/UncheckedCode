// Level loader -- i need to integrate into gameplay screen or loadscreen when I get home
// also need to integrate JSON.net for loading objs and perhaps Physics.NET/Box2D for physics and collision

 public class Level{
        private Level(){} //private ctor
        public const string LEVEL_DIRECTORY = "Levels";
        public string Name {get;set;}
        public Texture2D LevelMap {get;set;}
        public Texture2D CollisionMap {get;set;}
        public List<Actor> Actors {get;set;}
        public LeveLData {get;set;}
        public string RawLevelData {get;set;}

        // a static method for constructing levels
        public static Level Load(string Name)
        {

            //loads levelimage, collision imagage, level data file            
            if (content == null)
                    content = new ContentManager(ScreenManager.Game.Services, "Content");

            Level lvl = new Level();
            lvl.Name = Name;
            lvl.LevelMap = content.Load<Texture2D>(LEVEL_DIRECTORY+"//"+Name); //Required            
            lvl.CollisionMap = content.Load<Texture2D>(LEVEL_DIRECTORY +"//"+Name+"_coll" );  
            string filePath = Content.RootDirectory + "//" + LEVEL_DIRECTORY + "//" + Name + ".lvl";       
            lvl.RawLevelData = File.ReadAllText(filePath);
            lvl.LevelData = JsonConvert.DeserializeObject<Of List<Actor>>(RawLevelData);
            lvl.Actors = lvl.LeveLData.Actors;

            return lvl;
        }

    }

    public class LeveLData
    {
        public List<Actor> Actors {get;set;}
        public string MapName {get;set;}
        public Rectangle CameraStart {get;set;}
        public Vector2 PlayerStart {get;set;}        
    }

public interface IRenderable : IComparable<IRenderable>
{
    Guid Id {get;set;}
    int Depth {get;set;}
    Texture2D Sprite {get;set;}
    Rectangle Source {get;set;}
    Rectangle Destination {get;set;}
    Color Color {get;set;}
}

public class Sprite : IRenderable
{    
    Guid Id = Guid.New();
    int Depth {get;set;}
    Texture2D Sprite {get;set;}
    Rectangle Source {get;set;}
    Rectangle Destination {get;set;}
    Color Color {get;set;}
    public int CompareTo( IRenderable other)
    {
        return this.Depth.CompareTo(other.Depth);
    }    
}


/// <summary>
/// The scenegraph handles sorted rendering of all objects in the scene from back-to front
/// Each Screen may have its own scenegraph to handle ordeed rendering within its own context
/// The Screen is responsible for calling Reset() within its Update() method (if needed)
/// Reset is primarily used to ensure that dead objects are purged. For instance, if using 
/// short-lifetime objects like projectiles, you want to ensure that they're removed from the screen 
//  when their object lifetime has ended
/// </summary>
public class SceneGraph
{
      private ScreenManager ScreenManagerRef; //may not be needed
      List<IRenderable> _renderableObjects;
      IRenderable[] _shortTermObjects;

      public SceneGraph()
      {          
        _renderableObjects = new List<IRenderable>();        
      }

      public void Reset()
      {
         // called on the update loop to clear all renderableObjects and insert any new living objects
         _renderableObjects.Clear();          
      }

      public void AddRenderable( IRenderable renderable )
      {
         _renderableObjects.Add(renderable);
      }

      public void Draw( SpriteBatch spriteBatch )
      {
         //sorted back to front using Icomparables interface
         //back depth is 0, front depth is anything greater than 0
         _renderableObjects.Sort();
         spriteBatch.Begin();
         foreach(var r in _rendableObjects)
            spriteBatch.Draw( r.Sprite, r.Source, r.Destination, r.Color );
         spriteBatch.End();
      }


}

